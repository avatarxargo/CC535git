
struct VertexDataInput {
	float4 vertex: POSITION;
	float3 normal: NORMAL;
	float3 color: COLOR;
};

struct VertexDataOutput {
	float4 projv  : POSITION;
	float3 normal: TEXCOORD0;
	float3 vxyz: TEXCOORD1;
	float3 color : COLOR;
	float4 projvme;
	float depth;
};

struct PixelDataOutput {
	float4 color : COLOR;
	float depth : DEPTH;
};

VertexDataOutput VertexMain(VertexDataInput vdi, 
  uniform float4x4 modelViewProj, 
  uniform float MR, uniform float3 MC, uniform float Mf) {

  VertexDataOutput ret;
//  ret.projv = mul(modelViewProj, vdi.vertex);

  float3 rdir = normalize(vdi.vertex.xyz - MC);
  float3 Vp = MC + rdir*MR;
  float3 mvertex = vdi.vertex.xyz + (Vp-vdi.vertex.xyz)*Mf;
  ret.projv = mul(modelViewProj, float4(mvertex, 1.0f));
  ret.projvme = vdi.vertex;

  ret.normal = vdi.normal;
  ret.vxyz = vdi.vertex.xyz;
  ret.color = vdi.color;
  ret.depth = ret.projv.z / 1000;
  return ret;

}

TRIANGLE void GeometryMain(AttribArray<VertexDataOutput> tverts,
	uniform float4x4 modelViewProj) {

	emitVertex(tverts[0]);
	emitVertex(tverts[1]);
	emitVertex(tverts[2]);
	return;

}

//https://stackoverflow.com/questions/33685433/ray-square-intersection-3d
//orient(a,b,c,n) =  [(b-a) x (c-a)] . n
//x: cross product; .: dot product

float distance(float3 a, float3 b) {
	float3 tmp = (a-b)*(a-b);
	return sqrt(tmp.x+tmp.y+tmp.z);
}

bool rayPlaneX(float3 Rstart, float3 Rdir, float3 Pa, float3 Pd, float3 core, float radius, float3 Pnormal, float3 camera) {
	// assuming vectors are all normalized
	//bool backfacing = dot(camera, Pnormal) < 0;
	//Pnormal = backfacing ? Pnormal : -Pnormal;
	
	float denom = dot(Pnormal, Rdir);
	if (denom > 1e-6) {
		float3 PR = Pa - Rstart;
		float t = dot(PR, Pnormal) / denom;
		if(t >= 0) {
			float3 candidate = Rstart + t * Rdir;
			if ((candidate.y > Pd.y && candidate.z > Pd.z) &&
					(candidate.y < Pa.y && candidate.z < Pa.z)) {
				return (distance(candidate,core) > radius);		
			}
		}
	}
	return false;
}

bool rayPlaneY(float3 Rstart, float3 Rdir, float3 Pa, float3 Pd, float3 core, float radius, float3 Pnormal, float3 camera) {
	// assuming vectors are all normalized
	//bool backfacing = dot(camera, Pnormal) < 0;
	//Pnormal = backfacing ? Pnormal : -Pnormal;
	
	float denom = dot(Pnormal, Rdir);
	if (denom > 1e-6) {
		float3 PR = Pa - Rstart;
		float t = dot(PR, Pnormal) / denom;
		if(t >= 0) {
			float3 candidate = Rstart + t * Rdir;
			if ((candidate.x > Pd.x && candidate.z > Pd.z) &&
					(candidate.x < Pa.x && candidate.z < Pa.z)) {
				return (distance(candidate,core) > radius);		
			}
		}
	}
	return false;
}

bool rayPlaneZ(float3 Rstart, float3 Rdir, float3 Pa, float3 Pd, float3 core, float radius, float3 Pnormal, float3 camera) {
	// assuming vectors are all normalized
	//bool backfacing = dot(camera, Pnormal) < 0;
	//Pnormal = backfacing ? Pnormal : -Pnormal;

	float denom = dot(Pnormal, Rdir);
	if (denom > 1e-6) {
		float3 PR = Pa - Rstart;
		float t = dot(PR, Pnormal) / denom;
		if(t >= 0) {
			float3 candidate = Rstart + t * Rdir;
			if ((candidate.x > Pd.x && candidate.y > Pd.y) &&
					(candidate.x < Pa.x && candidate.y < Pa.y)) {
				return (distance(candidate,core) > radius);		
			}
		}
	}
	return false;
}

bool intersectCube(float3 pos, float3 cube, float3 light, float3 camera) {
	float sh = 51;
	float radius = 61;
	float3 raydir = normalize(light-pos);
	//X
	float3 normal = normalize(float3(cube.x + sh - light.x,0,0));
	if( rayPlaneX(pos, raydir, cube+float3(sh,sh,sh), cube+float3(sh,-sh,-sh), cube, radius, -normal, camera) ) {
		return true;
	}
	normal = normalize(float3(cube.x - sh - light.x,0,0));
	if( rayPlaneX(pos, raydir, cube+float3(-sh,sh,sh), cube+float3(-sh,-sh,-sh), cube, radius, -normal, camera) ) {
		return true;
	}
	//Y
	normal = normalize(float3(0,cube.y + sh - light.y,0));
	if( rayPlaneY(pos, raydir, cube+float3(sh,sh,sh), cube+float3(-sh,sh,-sh), cube, radius, -normal, camera) ) {
		return true;
	}
	normal = normalize(float3(0,cube.y - sh - light.y,0));
	if( rayPlaneY(pos, raydir, cube+float3(sh,-sh,sh), cube+float3(-sh,-sh,-sh), cube, radius, -normal, camera) ) {
		return true;
	}
	//Z
	normal = normalize(float3(0,0,cube.z + sh - light.z));
	if( rayPlaneZ(pos, raydir, cube+float3(sh,sh,sh), cube+float3(-sh,-sh,sh), cube, radius, -normal, camera) ) {
		return true;
	}
	normal = normalize(float3(0,0,cube.z - sh - light.z));
	if( rayPlaneZ(pos, raydir, cube+float3(sh,sh,-sh), cube+float3(-sh,-sh,-sh), cube, radius, -normal, camera) ) {
		return true;
	}
	return false;
}

bool intersectWorld(float3 pos, float3 camera, float3 gpulightA, float3 gpulightB, float3 gpulightC, float3 gpulightD,
	float3 gpucubeA, float3 gpucubeB, float3 gpucubeC) {
	return (intersectCube(pos, gpucubeA, gpulightA, camera) ||
			intersectCube(pos, gpucubeB, gpulightA, camera) ||
			intersectCube(pos, gpucubeC, gpulightA, camera));
}

PixelDataOutput FragmentMain(VertexDataOutput pdi, uniform float3 gpucol,
	uniform float3 C0, uniform float3 C1,
	uniform float3 gpulightA, uniform float3 gpulightB, uniform float3 gpulightC, uniform float3 gpulightD,
	uniform float3 gpucubeA, uniform float3 gpucubeB, uniform float3 gpucubeC) {

  PixelDataOutput ret;
	
	float radius = 800;
	float dsta = (1 - distance(pdi.projvme.xyz, gpulightA)/radius);
	float dstb = (1 - distance(pdi.projvme.xyz, gpulightB)/radius);
	float dstc = (1 - distance(pdi.projvme.xyz, gpulightC)/radius);
	float dstd = (1 - distance(pdi.projvme.xyz, gpulightD)/radius);
	float light = max(dsta,max(dstb,max(dstc,dstd)));
	
	if(intersectWorld(pdi.projvme.xyz, C1, gpucubeA, gpucubeB, gpucubeC, gpulightA, gpulightB, gpulightC, gpulightD)) {
		light = 0;
	}
	//float3 col = backfacing ? float3(1,0,0) : float3(0,1,0); 
	ret.color.rgb = gpucol * light; //*pdi.depth;//pdi.color; 
	//ret.color.rgb = tex2D(gputexture, pdi.color.xy).rgb;

	//cutout:
	float3 cmp = pdi.color - float3(0.5,0.5,0.5);
  if(C0.x > 0.1) { //cull
	  if(length(cmp) < 0.6) {
		ret.color.a = 0;
		ret.depth = 1000;
	  } else {
		ret.color.a = 1; 
		ret.depth = pdi.depth;
	  }
  } else { //don't
	ret.color.a = 1; 
	ret.depth = pdi.depth;
  }
  return ret;

//  float ka = 0.2f;
 // float3 L = float3(0.0f, 0.0f, 0.0f);
 // float3 lv = float3(0.0f, 0.0f, 1.0f);
 // float kd = mul(pdi.normal, lv);
 // kd = (kd < 0.0f) ? 0.0f : kd;
//  float3 mc = float3(1.0f, 0.0f, 0.0f);
//  ret.color.rgb = mc * (ka + (1.0f-ka)*kd);

//  ret.color.rgb = (pdi.normal + float3(1.0f, 1.0f, 1.0f))/2.0f;
//  ret.color.rgb = float3(1.0f, 0.0f, 0.0f);

//	ret.color.rgb = float3(0.0f, 0.0f, 0.0f);
//	ret.color.g = ka;
	
//	ret.color.rgb = float3(0.0f, 0.0f, 0.0f);
//	ret.color.rgb = (C0 + float3(150.0f, 150.0f, 150.0f)) / 30.0f;

//	ret.color.rgba = float4(ret.color.rgb, 0.5);

 //   return ret;


	// BILLBOARD REFLECTIONS

	// create reflected ray at this current pixel

	// eye ray is eye-3D surface point at this current pixel
	//		eye needs to be passed in as uniform float3
	//		3D surface point is provided by pdi.vxyz
	// normal is provided as pdi.normal
	// reflect eye ray over normal to get reflected ray

	// intersect reflected ray with billboards
	// if multiple intersections, keep closest one
	// if no intersections, lookup reflected ray in environment mapping
	// billboard is passed in as uniform parameter, e.g. float4x4
	// EXTRA CREDIT: environment mapping is a uniform input parameter "cube sampler or something like that"

	// SOFT SHADOWS CAST BY RECTANGULAR LIGHT SOURCE
	// for all light sample rows
	//		for all light samples in current row
	//			define light ray = light sample - 3D surface point
	//			intersect light ray with all box faces
	//			if no intersection, increment fragment light counter

}
